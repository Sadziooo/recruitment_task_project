/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_IMU_ICM_42670_P_H
#define _MOCK_IMU_ICM_42670_P_H

#include "unity.h"
#include "IMU_ICM_42670_P.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_IMU_ICM_42670_P_Init(void);
void mock_IMU_ICM_42670_P_Destroy(void);
void mock_IMU_ICM_42670_P_Verify(void);




#define imu_init_Ignore() TEST_FAIL_MESSAGE("imu_init requires _IgnoreAndReturn");
#define imu_init_IgnoreAndReturn(cmock_retval) imu_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_init_StopIgnore() imu_init_CMockStopIgnore()
void imu_init_CMockStopIgnore(void);
#define imu_init_Expect(i2c, accel_mode, gyro_mode, idle, accel_lp_clk_sel) TEST_FAIL_MESSAGE("imu_init requires _ExpectAndReturn");
#define imu_init_ExpectAndReturn(i2c, accel_mode, gyro_mode, idle, accel_lp_clk_sel, cmock_retval) imu_init_CMockExpectAndReturn(__LINE__, i2c, accel_mode, gyro_mode, idle, accel_lp_clk_sel, cmock_retval)
void imu_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, IMU_Interface_i* i2c, uint8_t accel_mode, uint8_t gyro_mode, uint8_t idle, uint8_t accel_lp_clk_sel, int cmock_to_return);
typedef int (* CMOCK_imu_init_CALLBACK)(IMU_Interface_i* i2c, uint8_t accel_mode, uint8_t gyro_mode, uint8_t idle, uint8_t accel_lp_clk_sel, int cmock_num_calls);
void imu_init_AddCallback(CMOCK_imu_init_CALLBACK Callback);
void imu_init_Stub(CMOCK_imu_init_CALLBACK Callback);
#define imu_init_StubWithCallback imu_init_Stub
#define imu_init_ExpectAndThrow(i2c, accel_mode, gyro_mode, idle, accel_lp_clk_sel, cmock_to_throw) imu_init_CMockExpectAndThrow(__LINE__, i2c, accel_mode, gyro_mode, idle, accel_lp_clk_sel, cmock_to_throw)
void imu_init_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, IMU_Interface_i* i2c, uint8_t accel_mode, uint8_t gyro_mode, uint8_t idle, uint8_t accel_lp_clk_sel, CEXCEPTION_T cmock_to_throw);
#define imu_config_accel_Ignore() TEST_FAIL_MESSAGE("imu_config_accel requires _IgnoreAndReturn");
#define imu_config_accel_IgnoreAndReturn(cmock_retval) imu_config_accel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_config_accel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_config_accel_StopIgnore() imu_config_accel_CMockStopIgnore()
void imu_config_accel_CMockStopIgnore(void);
#define imu_config_accel_Expect(range, freq) TEST_FAIL_MESSAGE("imu_config_accel requires _ExpectAndReturn");
#define imu_config_accel_ExpectAndReturn(range, freq, cmock_retval) imu_config_accel_CMockExpectAndReturn(__LINE__, range, freq, cmock_retval)
void imu_config_accel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t range, uint8_t freq, int cmock_to_return);
typedef int (* CMOCK_imu_config_accel_CALLBACK)(uint8_t range, uint8_t freq, int cmock_num_calls);
void imu_config_accel_AddCallback(CMOCK_imu_config_accel_CALLBACK Callback);
void imu_config_accel_Stub(CMOCK_imu_config_accel_CALLBACK Callback);
#define imu_config_accel_StubWithCallback imu_config_accel_Stub
#define imu_config_accel_ExpectAndThrow(range, freq, cmock_to_throw) imu_config_accel_CMockExpectAndThrow(__LINE__, range, freq, cmock_to_throw)
void imu_config_accel_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint8_t range, uint8_t freq, CEXCEPTION_T cmock_to_throw);
#define imu_config_gyro_Ignore() TEST_FAIL_MESSAGE("imu_config_gyro requires _IgnoreAndReturn");
#define imu_config_gyro_IgnoreAndReturn(cmock_retval) imu_config_gyro_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_config_gyro_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_config_gyro_StopIgnore() imu_config_gyro_CMockStopIgnore()
void imu_config_gyro_CMockStopIgnore(void);
#define imu_config_gyro_Expect(range, freq) TEST_FAIL_MESSAGE("imu_config_gyro requires _ExpectAndReturn");
#define imu_config_gyro_ExpectAndReturn(range, freq, cmock_retval) imu_config_gyro_CMockExpectAndReturn(__LINE__, range, freq, cmock_retval)
void imu_config_gyro_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t range, uint8_t freq, int cmock_to_return);
typedef int (* CMOCK_imu_config_gyro_CALLBACK)(uint8_t range, uint8_t freq, int cmock_num_calls);
void imu_config_gyro_AddCallback(CMOCK_imu_config_gyro_CALLBACK Callback);
void imu_config_gyro_Stub(CMOCK_imu_config_gyro_CALLBACK Callback);
#define imu_config_gyro_StubWithCallback imu_config_gyro_Stub
#define imu_config_gyro_ExpectAndThrow(range, freq, cmock_to_throw) imu_config_gyro_CMockExpectAndThrow(__LINE__, range, freq, cmock_to_throw)
void imu_config_gyro_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint8_t range, uint8_t freq, CEXCEPTION_T cmock_to_throw);
#define imu_start_acquisition_default_Ignore() TEST_FAIL_MESSAGE("imu_start_acquisition_default requires _IgnoreAndReturn");
#define imu_start_acquisition_default_IgnoreAndReturn(cmock_retval) imu_start_acquisition_default_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_start_acquisition_default_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_start_acquisition_default_StopIgnore() imu_start_acquisition_default_CMockStopIgnore()
void imu_start_acquisition_default_CMockStopIgnore(void);
#define imu_start_acquisition_default_Expect() TEST_FAIL_MESSAGE("imu_start_acquisition_default requires _ExpectAndReturn");
#define imu_start_acquisition_default_ExpectAndReturn(cmock_retval) imu_start_acquisition_default_CMockExpectAndReturn(__LINE__, cmock_retval)
void imu_start_acquisition_default_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_imu_start_acquisition_default_CALLBACK)(int cmock_num_calls);
void imu_start_acquisition_default_AddCallback(CMOCK_imu_start_acquisition_default_CALLBACK Callback);
void imu_start_acquisition_default_Stub(CMOCK_imu_start_acquisition_default_CALLBACK Callback);
#define imu_start_acquisition_default_StubWithCallback imu_start_acquisition_default_Stub
#define imu_start_acquisition_default_ExpectAndThrow(cmock_to_throw) imu_start_acquisition_default_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void imu_start_acquisition_default_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define imu_stop_acquisition_default_Ignore() TEST_FAIL_MESSAGE("imu_stop_acquisition_default requires _IgnoreAndReturn");
#define imu_stop_acquisition_default_IgnoreAndReturn(cmock_retval) imu_stop_acquisition_default_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_stop_acquisition_default_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_stop_acquisition_default_StopIgnore() imu_stop_acquisition_default_CMockStopIgnore()
void imu_stop_acquisition_default_CMockStopIgnore(void);
#define imu_stop_acquisition_default_Expect() TEST_FAIL_MESSAGE("imu_stop_acquisition_default requires _ExpectAndReturn");
#define imu_stop_acquisition_default_ExpectAndReturn(cmock_retval) imu_stop_acquisition_default_CMockExpectAndReturn(__LINE__, cmock_retval)
void imu_stop_acquisition_default_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_imu_stop_acquisition_default_CALLBACK)(int cmock_num_calls);
void imu_stop_acquisition_default_AddCallback(CMOCK_imu_stop_acquisition_default_CALLBACK Callback);
void imu_stop_acquisition_default_Stub(CMOCK_imu_stop_acquisition_default_CALLBACK Callback);
#define imu_stop_acquisition_default_StubWithCallback imu_stop_acquisition_default_Stub
#define imu_stop_acquisition_default_ExpectAndThrow(cmock_to_throw) imu_stop_acquisition_default_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void imu_stop_acquisition_default_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define imu_start_acquisition_accel_Ignore() TEST_FAIL_MESSAGE("imu_start_acquisition_accel requires _IgnoreAndReturn");
#define imu_start_acquisition_accel_IgnoreAndReturn(cmock_retval) imu_start_acquisition_accel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_start_acquisition_accel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_start_acquisition_accel_StopIgnore() imu_start_acquisition_accel_CMockStopIgnore()
void imu_start_acquisition_accel_CMockStopIgnore(void);
#define imu_start_acquisition_accel_Expect(mode) TEST_FAIL_MESSAGE("imu_start_acquisition_accel requires _ExpectAndReturn");
#define imu_start_acquisition_accel_ExpectAndReturn(mode, cmock_retval) imu_start_acquisition_accel_CMockExpectAndReturn(__LINE__, mode, cmock_retval)
void imu_start_acquisition_accel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t mode, int cmock_to_return);
typedef int (* CMOCK_imu_start_acquisition_accel_CALLBACK)(uint8_t mode, int cmock_num_calls);
void imu_start_acquisition_accel_AddCallback(CMOCK_imu_start_acquisition_accel_CALLBACK Callback);
void imu_start_acquisition_accel_Stub(CMOCK_imu_start_acquisition_accel_CALLBACK Callback);
#define imu_start_acquisition_accel_StubWithCallback imu_start_acquisition_accel_Stub
#define imu_start_acquisition_accel_ExpectAndThrow(mode, cmock_to_throw) imu_start_acquisition_accel_CMockExpectAndThrow(__LINE__, mode, cmock_to_throw)
void imu_start_acquisition_accel_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint8_t mode, CEXCEPTION_T cmock_to_throw);
#define imu_start_acquisition_gyro_Ignore() TEST_FAIL_MESSAGE("imu_start_acquisition_gyro requires _IgnoreAndReturn");
#define imu_start_acquisition_gyro_IgnoreAndReturn(cmock_retval) imu_start_acquisition_gyro_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_start_acquisition_gyro_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_start_acquisition_gyro_StopIgnore() imu_start_acquisition_gyro_CMockStopIgnore()
void imu_start_acquisition_gyro_CMockStopIgnore(void);
#define imu_start_acquisition_gyro_Expect(mode) TEST_FAIL_MESSAGE("imu_start_acquisition_gyro requires _ExpectAndReturn");
#define imu_start_acquisition_gyro_ExpectAndReturn(mode, cmock_retval) imu_start_acquisition_gyro_CMockExpectAndReturn(__LINE__, mode, cmock_retval)
void imu_start_acquisition_gyro_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t mode, int cmock_to_return);
typedef int (* CMOCK_imu_start_acquisition_gyro_CALLBACK)(uint8_t mode, int cmock_num_calls);
void imu_start_acquisition_gyro_AddCallback(CMOCK_imu_start_acquisition_gyro_CALLBACK Callback);
void imu_start_acquisition_gyro_Stub(CMOCK_imu_start_acquisition_gyro_CALLBACK Callback);
#define imu_start_acquisition_gyro_StubWithCallback imu_start_acquisition_gyro_Stub
#define imu_start_acquisition_gyro_ExpectAndThrow(mode, cmock_to_throw) imu_start_acquisition_gyro_CMockExpectAndThrow(__LINE__, mode, cmock_to_throw)
void imu_start_acquisition_gyro_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint8_t mode, CEXCEPTION_T cmock_to_throw);
#define imu_stop_acquisition_accel_Ignore() TEST_FAIL_MESSAGE("imu_stop_acquisition_accel requires _IgnoreAndReturn");
#define imu_stop_acquisition_accel_IgnoreAndReturn(cmock_retval) imu_stop_acquisition_accel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_stop_acquisition_accel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_stop_acquisition_accel_StopIgnore() imu_stop_acquisition_accel_CMockStopIgnore()
void imu_stop_acquisition_accel_CMockStopIgnore(void);
#define imu_stop_acquisition_accel_Expect() TEST_FAIL_MESSAGE("imu_stop_acquisition_accel requires _ExpectAndReturn");
#define imu_stop_acquisition_accel_ExpectAndReturn(cmock_retval) imu_stop_acquisition_accel_CMockExpectAndReturn(__LINE__, cmock_retval)
void imu_stop_acquisition_accel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_imu_stop_acquisition_accel_CALLBACK)(int cmock_num_calls);
void imu_stop_acquisition_accel_AddCallback(CMOCK_imu_stop_acquisition_accel_CALLBACK Callback);
void imu_stop_acquisition_accel_Stub(CMOCK_imu_stop_acquisition_accel_CALLBACK Callback);
#define imu_stop_acquisition_accel_StubWithCallback imu_stop_acquisition_accel_Stub
#define imu_stop_acquisition_accel_ExpectAndThrow(cmock_to_throw) imu_stop_acquisition_accel_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void imu_stop_acquisition_accel_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define imu_stop_acquisition_gyro_Ignore() TEST_FAIL_MESSAGE("imu_stop_acquisition_gyro requires _IgnoreAndReturn");
#define imu_stop_acquisition_gyro_IgnoreAndReturn(cmock_retval) imu_stop_acquisition_gyro_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_stop_acquisition_gyro_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_stop_acquisition_gyro_StopIgnore() imu_stop_acquisition_gyro_CMockStopIgnore()
void imu_stop_acquisition_gyro_CMockStopIgnore(void);
#define imu_stop_acquisition_gyro_Expect() TEST_FAIL_MESSAGE("imu_stop_acquisition_gyro requires _ExpectAndReturn");
#define imu_stop_acquisition_gyro_ExpectAndReturn(cmock_retval) imu_stop_acquisition_gyro_CMockExpectAndReturn(__LINE__, cmock_retval)
void imu_stop_acquisition_gyro_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_imu_stop_acquisition_gyro_CALLBACK)(int cmock_num_calls);
void imu_stop_acquisition_gyro_AddCallback(CMOCK_imu_stop_acquisition_gyro_CALLBACK Callback);
void imu_stop_acquisition_gyro_Stub(CMOCK_imu_stop_acquisition_gyro_CALLBACK Callback);
#define imu_stop_acquisition_gyro_StubWithCallback imu_stop_acquisition_gyro_Stub
#define imu_stop_acquisition_gyro_ExpectAndThrow(cmock_to_throw) imu_stop_acquisition_gyro_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void imu_stop_acquisition_gyro_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define imu_check_data_ready_flag_Ignore() TEST_FAIL_MESSAGE("imu_check_data_ready_flag requires _IgnoreAndReturn");
#define imu_check_data_ready_flag_IgnoreAndReturn(cmock_retval) imu_check_data_ready_flag_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_check_data_ready_flag_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_check_data_ready_flag_StopIgnore() imu_check_data_ready_flag_CMockStopIgnore()
void imu_check_data_ready_flag_CMockStopIgnore(void);
#define imu_check_data_ready_flag_Expect() TEST_FAIL_MESSAGE("imu_check_data_ready_flag requires _ExpectAndReturn");
#define imu_check_data_ready_flag_ExpectAndReturn(cmock_retval) imu_check_data_ready_flag_CMockExpectAndReturn(__LINE__, cmock_retval)
void imu_check_data_ready_flag_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_imu_check_data_ready_flag_CALLBACK)(int cmock_num_calls);
void imu_check_data_ready_flag_AddCallback(CMOCK_imu_check_data_ready_flag_CALLBACK Callback);
void imu_check_data_ready_flag_Stub(CMOCK_imu_check_data_ready_flag_CALLBACK Callback);
#define imu_check_data_ready_flag_StubWithCallback imu_check_data_ready_flag_Stub
#define imu_check_data_ready_flag_ExpectAndThrow(cmock_to_throw) imu_check_data_ready_flag_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void imu_check_data_ready_flag_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);
#define imu_read_accel_Ignore() TEST_FAIL_MESSAGE("imu_read_accel requires _IgnoreAndReturn");
#define imu_read_accel_IgnoreAndReturn(cmock_retval) imu_read_accel_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_read_accel_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_read_accel_StopIgnore() imu_read_accel_CMockStopIgnore()
void imu_read_accel_CMockStopIgnore(void);
#define imu_read_accel_Expect(accel_data) TEST_FAIL_MESSAGE("imu_read_accel requires _ExpectAndReturn");
#define imu_read_accel_ExpectAndReturn(accel_data, cmock_retval) imu_read_accel_CMockExpectAndReturn(__LINE__, accel_data, cmock_retval)
void imu_read_accel_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int16_t* accel_data, int cmock_to_return);
typedef int (* CMOCK_imu_read_accel_CALLBACK)(int16_t* accel_data, int cmock_num_calls);
void imu_read_accel_AddCallback(CMOCK_imu_read_accel_CALLBACK Callback);
void imu_read_accel_Stub(CMOCK_imu_read_accel_CALLBACK Callback);
#define imu_read_accel_StubWithCallback imu_read_accel_Stub
#define imu_read_accel_ExpectAndThrow(accel_data, cmock_to_throw) imu_read_accel_CMockExpectAndThrow(__LINE__, accel_data, cmock_to_throw)
void imu_read_accel_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int16_t* accel_data, CEXCEPTION_T cmock_to_throw);
#define imu_read_gyro_Ignore() TEST_FAIL_MESSAGE("imu_read_gyro requires _IgnoreAndReturn");
#define imu_read_gyro_IgnoreAndReturn(cmock_retval) imu_read_gyro_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_read_gyro_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_read_gyro_StopIgnore() imu_read_gyro_CMockStopIgnore()
void imu_read_gyro_CMockStopIgnore(void);
#define imu_read_gyro_Expect(gyro_data) TEST_FAIL_MESSAGE("imu_read_gyro requires _ExpectAndReturn");
#define imu_read_gyro_ExpectAndReturn(gyro_data, cmock_retval) imu_read_gyro_CMockExpectAndReturn(__LINE__, gyro_data, cmock_retval)
void imu_read_gyro_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int16_t* gyro_data, int cmock_to_return);
typedef int (* CMOCK_imu_read_gyro_CALLBACK)(int16_t* gyro_data, int cmock_num_calls);
void imu_read_gyro_AddCallback(CMOCK_imu_read_gyro_CALLBACK Callback);
void imu_read_gyro_Stub(CMOCK_imu_read_gyro_CALLBACK Callback);
#define imu_read_gyro_StubWithCallback imu_read_gyro_Stub
#define imu_read_gyro_ExpectAndThrow(gyro_data, cmock_to_throw) imu_read_gyro_CMockExpectAndThrow(__LINE__, gyro_data, cmock_to_throw)
void imu_read_gyro_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int16_t* gyro_data, CEXCEPTION_T cmock_to_throw);
#define imu_write_register_Ignore() TEST_FAIL_MESSAGE("imu_write_register requires _IgnoreAndReturn");
#define imu_write_register_IgnoreAndReturn(cmock_retval) imu_write_register_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_write_register_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_write_register_StopIgnore() imu_write_register_CMockStopIgnore()
void imu_write_register_CMockStopIgnore(void);
#define imu_write_register_Expect(reg_addr, value) TEST_FAIL_MESSAGE("imu_write_register requires _ExpectAndReturn");
#define imu_write_register_ExpectAndReturn(reg_addr, value, cmock_retval) imu_write_register_CMockExpectAndReturn(__LINE__, reg_addr, value, cmock_retval)
void imu_write_register_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t reg_addr, uint8_t value, int cmock_to_return);
typedef int (* CMOCK_imu_write_register_CALLBACK)(uint16_t reg_addr, uint8_t value, int cmock_num_calls);
void imu_write_register_AddCallback(CMOCK_imu_write_register_CALLBACK Callback);
void imu_write_register_Stub(CMOCK_imu_write_register_CALLBACK Callback);
#define imu_write_register_StubWithCallback imu_write_register_Stub
#define imu_write_register_ExpectAndThrow(reg_addr, value, cmock_to_throw) imu_write_register_CMockExpectAndThrow(__LINE__, reg_addr, value, cmock_to_throw)
void imu_write_register_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16_t reg_addr, uint8_t value, CEXCEPTION_T cmock_to_throw);
#define imu_read_register_Ignore() TEST_FAIL_MESSAGE("imu_read_register requires _IgnoreAndReturn");
#define imu_read_register_IgnoreAndReturn(cmock_retval) imu_read_register_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_read_register_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_read_register_StopIgnore() imu_read_register_CMockStopIgnore()
void imu_read_register_CMockStopIgnore(void);
#define imu_read_register_Expect(reg_addr, value) TEST_FAIL_MESSAGE("imu_read_register requires _ExpectAndReturn");
#define imu_read_register_ExpectAndReturn(reg_addr, value, cmock_retval) imu_read_register_CMockExpectAndReturn(__LINE__, reg_addr, value, cmock_retval)
void imu_read_register_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t reg_addr, uint8_t* value, int cmock_to_return);
typedef int (* CMOCK_imu_read_register_CALLBACK)(uint16_t reg_addr, uint8_t* value, int cmock_num_calls);
void imu_read_register_AddCallback(CMOCK_imu_read_register_CALLBACK Callback);
void imu_read_register_Stub(CMOCK_imu_read_register_CALLBACK Callback);
#define imu_read_register_StubWithCallback imu_read_register_Stub
#define imu_read_register_ExpectAndThrow(reg_addr, value, cmock_to_throw) imu_read_register_CMockExpectAndThrow(__LINE__, reg_addr, value, cmock_to_throw)
void imu_read_register_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16_t reg_addr, uint8_t* value, CEXCEPTION_T cmock_to_throw);
#define imu_read_multiple_registers_Ignore() TEST_FAIL_MESSAGE("imu_read_multiple_registers requires _IgnoreAndReturn");
#define imu_read_multiple_registers_IgnoreAndReturn(cmock_retval) imu_read_multiple_registers_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void imu_read_multiple_registers_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define imu_read_multiple_registers_StopIgnore() imu_read_multiple_registers_CMockStopIgnore()
void imu_read_multiple_registers_CMockStopIgnore(void);
#define imu_read_multiple_registers_Expect(reg_addr, value, len) TEST_FAIL_MESSAGE("imu_read_multiple_registers requires _ExpectAndReturn");
#define imu_read_multiple_registers_ExpectAndReturn(reg_addr, value, len, cmock_retval) imu_read_multiple_registers_CMockExpectAndReturn(__LINE__, reg_addr, value, len, cmock_retval)
void imu_read_multiple_registers_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t reg_addr, uint8_t* value, uint16_t len, int cmock_to_return);
typedef int (* CMOCK_imu_read_multiple_registers_CALLBACK)(uint16_t reg_addr, uint8_t* value, uint16_t len, int cmock_num_calls);
void imu_read_multiple_registers_AddCallback(CMOCK_imu_read_multiple_registers_CALLBACK Callback);
void imu_read_multiple_registers_Stub(CMOCK_imu_read_multiple_registers_CALLBACK Callback);
#define imu_read_multiple_registers_StubWithCallback imu_read_multiple_registers_Stub
#define imu_read_multiple_registers_ExpectAndThrow(reg_addr, value, len, cmock_to_throw) imu_read_multiple_registers_CMockExpectAndThrow(__LINE__, reg_addr, value, len, cmock_to_throw)
void imu_read_multiple_registers_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, uint16_t reg_addr, uint8_t* value, uint16_t len, CEXCEPTION_T cmock_to_throw);
#define imu_debug_registers_IgnoreAndReturn(cmock_retval) TEST_FAIL_MESSAGE("imu_debug_registers requires _Ignore (not AndReturn)");
#define imu_debug_registers_Ignore() imu_debug_registers_CMockIgnore()
void imu_debug_registers_CMockIgnore(void);
#define imu_debug_registers_StopIgnore() imu_debug_registers_CMockStopIgnore()
void imu_debug_registers_CMockStopIgnore(void);
#define imu_debug_registers_ExpectAndReturn(cmock_retval) TEST_FAIL_MESSAGE("imu_debug_registers requires _Expect (not AndReturn)");
#define imu_debug_registers_Expect() imu_debug_registers_CMockExpect(__LINE__)
void imu_debug_registers_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_imu_debug_registers_CALLBACK)(int cmock_num_calls);
void imu_debug_registers_AddCallback(CMOCK_imu_debug_registers_CALLBACK Callback);
void imu_debug_registers_Stub(CMOCK_imu_debug_registers_CALLBACK Callback);
#define imu_debug_registers_StubWithCallback imu_debug_registers_Stub
#define imu_debug_registers_ExpectAndThrow(cmock_to_throw) imu_debug_registers_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void imu_debug_registers_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
