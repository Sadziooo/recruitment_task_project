/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_A_H
#define _MOCK_A_H

#include "unity.h"
#include "a.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

#ifdef __cplusplus
extern "C" {
#endif

void mock_a_Init(void);
void mock_a_Destroy(void);
void mock_a_Verify(void);




#define a_Ignore() TEST_FAIL_MESSAGE("a requires _IgnoreAndReturn");
#define a_IgnoreAndReturn(cmock_retval) a_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void a_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define a_StopIgnore() a_CMockStopIgnore()
void a_CMockStopIgnore(void);
#define a_Expect() TEST_FAIL_MESSAGE("a requires _ExpectAndReturn");
#define a_ExpectAndReturn(cmock_retval) a_CMockExpectAndReturn(__LINE__, cmock_retval)
void a_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_a_CALLBACK)(int cmock_num_calls);
void a_AddCallback(CMOCK_a_CALLBACK Callback);
void a_Stub(CMOCK_a_CALLBACK Callback);
#define a_StubWithCallback a_Stub
#define a_ExpectAndThrow(cmock_to_throw) a_CMockExpectAndThrow(__LINE__, cmock_to_throw)
void a_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, CEXCEPTION_T cmock_to_throw);

#ifdef __cplusplus
}
#endif

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
